# coding: utf-8

"""
    Kimai - API Docs

    JSON API for the Kimai time-tracking software: [API documentation](https://www.kimai.org/documentation/rest-api.html), [Swagger definition file](doc.json)   # noqa: E501

    OpenAPI spec version: 0.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaskQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'search_term': 'str',
        'customers': 'list[int]',
        'projects': 'list[int]',
        'activities': 'list[int]',
        'tags': 'str',
        'users': 'list[int]',
        'teams': 'list[int]',
        'status': 'list[str]',
        'page_size': 'float',
        'page': 'int',
        'order': 'str',
        'order_by': 'str'
    }

    attribute_map = {
        'search_term': 'searchTerm',
        'customers': 'customers',
        'projects': 'projects',
        'activities': 'activities',
        'tags': 'tags',
        'users': 'users',
        'teams': 'teams',
        'status': 'status',
        'page_size': 'pageSize',
        'page': 'page',
        'order': 'order',
        'order_by': 'orderBy'
    }

    def __init__(self, search_term=None, customers=None, projects=None, activities=None, tags=None, users=None, teams=None, status=None, page_size=None, page=None, order=None, order_by=None):  # noqa: E501
        """TaskQuery - a model defined in Swagger"""  # noqa: E501
        self._search_term = None
        self._customers = None
        self._projects = None
        self._activities = None
        self._tags = None
        self._users = None
        self._teams = None
        self._status = None
        self._page_size = None
        self._page = None
        self._order = None
        self._order_by = None
        self.discriminator = None
        if search_term is not None:
            self.search_term = search_term
        self.customers = customers
        self.projects = projects
        self.activities = activities
        if tags is not None:
            self.tags = tags
        if users is not None:
            self.users = users
        if teams is not None:
            self.teams = teams
        if status is not None:
            self.status = status
        if page_size is not None:
            self.page_size = page_size
        if page is not None:
            self.page = page
        self.order = order
        self.order_by = order_by

    @property
    def search_term(self):
        """Gets the search_term of this TaskQuery.  # noqa: E501


        :return: The search_term of this TaskQuery.  # noqa: E501
        :rtype: str
        """
        return self._search_term

    @search_term.setter
    def search_term(self, search_term):
        """Sets the search_term of this TaskQuery.


        :param search_term: The search_term of this TaskQuery.  # noqa: E501
        :type: str
        """

        self._search_term = search_term

    @property
    def customers(self):
        """Gets the customers of this TaskQuery.  # noqa: E501

        Array of customer IDs  # noqa: E501

        :return: The customers of this TaskQuery.  # noqa: E501
        :rtype: list[int]
        """
        return self._customers

    @customers.setter
    def customers(self, customers):
        """Sets the customers of this TaskQuery.

        Array of customer IDs  # noqa: E501

        :param customers: The customers of this TaskQuery.  # noqa: E501
        :type: list[int]
        """
        if customers is None:
            raise ValueError("Invalid value for `customers`, must not be `None`")  # noqa: E501

        self._customers = customers

    @property
    def projects(self):
        """Gets the projects of this TaskQuery.  # noqa: E501

        Array of project IDs  # noqa: E501

        :return: The projects of this TaskQuery.  # noqa: E501
        :rtype: list[int]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this TaskQuery.

        Array of project IDs  # noqa: E501

        :param projects: The projects of this TaskQuery.  # noqa: E501
        :type: list[int]
        """
        if projects is None:
            raise ValueError("Invalid value for `projects`, must not be `None`")  # noqa: E501

        self._projects = projects

    @property
    def activities(self):
        """Gets the activities of this TaskQuery.  # noqa: E501

        Array of activity IDs  # noqa: E501

        :return: The activities of this TaskQuery.  # noqa: E501
        :rtype: list[int]
        """
        return self._activities

    @activities.setter
    def activities(self, activities):
        """Sets the activities of this TaskQuery.

        Array of activity IDs  # noqa: E501

        :param activities: The activities of this TaskQuery.  # noqa: E501
        :type: list[int]
        """
        if activities is None:
            raise ValueError("Invalid value for `activities`, must not be `None`")  # noqa: E501

        self._activities = activities

    @property
    def tags(self):
        """Gets the tags of this TaskQuery.  # noqa: E501

        Comma separated list of tags  # noqa: E501

        :return: The tags of this TaskQuery.  # noqa: E501
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TaskQuery.

        Comma separated list of tags  # noqa: E501

        :param tags: The tags of this TaskQuery.  # noqa: E501
        :type: str
        """

        self._tags = tags

    @property
    def users(self):
        """Gets the users of this TaskQuery.  # noqa: E501

        Array of user IDs  # noqa: E501

        :return: The users of this TaskQuery.  # noqa: E501
        :rtype: list[int]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this TaskQuery.

        Array of user IDs  # noqa: E501

        :param users: The users of this TaskQuery.  # noqa: E501
        :type: list[int]
        """

        self._users = users

    @property
    def teams(self):
        """Gets the teams of this TaskQuery.  # noqa: E501

        Array of team IDs  # noqa: E501

        :return: The teams of this TaskQuery.  # noqa: E501
        :rtype: list[int]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this TaskQuery.

        Array of team IDs  # noqa: E501

        :param teams: The teams of this TaskQuery.  # noqa: E501
        :type: list[int]
        """

        self._teams = teams

    @property
    def status(self):
        """Gets the status of this TaskQuery.  # noqa: E501


        :return: The status of this TaskQuery.  # noqa: E501
        :rtype: list[str]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TaskQuery.


        :param status: The status of this TaskQuery.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["pending", "progress", "closed"]  # noqa: E501
        if not set(status).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `status` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(status) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._status = status

    @property
    def page_size(self):
        """Gets the page_size of this TaskQuery.  # noqa: E501


        :return: The page_size of this TaskQuery.  # noqa: E501
        :rtype: float
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this TaskQuery.


        :param page_size: The page_size of this TaskQuery.  # noqa: E501
        :type: float
        """

        self._page_size = page_size

    @property
    def page(self):
        """Gets the page of this TaskQuery.  # noqa: E501

        Page number. Default: 1  # noqa: E501

        :return: The page of this TaskQuery.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this TaskQuery.

        Page number. Default: 1  # noqa: E501

        :param page: The page of this TaskQuery.  # noqa: E501
        :type: int
        """

        self._page = page

    @property
    def order(self):
        """Gets the order of this TaskQuery.  # noqa: E501

        The order for returned items  # noqa: E501

        :return: The order of this TaskQuery.  # noqa: E501
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this TaskQuery.

        The order for returned items  # noqa: E501

        :param order: The order of this TaskQuery.  # noqa: E501
        :type: str
        """
        if order is None:
            raise ValueError("Invalid value for `order`, must not be `None`")  # noqa: E501
        allowed_values = ["ASC", "DESC"]  # noqa: E501
        if order not in allowed_values:
            raise ValueError(
                "Invalid value for `order` ({0}), must be one of {1}"  # noqa: E501
                .format(order, allowed_values)
            )

        self._order = order

    @property
    def order_by(self):
        """Gets the order_by of this TaskQuery.  # noqa: E501


        :return: The order_by of this TaskQuery.  # noqa: E501
        :rtype: str
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this TaskQuery.


        :param order_by: The order_by of this TaskQuery.  # noqa: E501
        :type: str
        """
        if order_by is None:
            raise ValueError("Invalid value for `order_by`, must not be `None`")  # noqa: E501
        allowed_values = ["title", "customer", "project", "activity", "description", "status", "user", "begin", "end", "team"]  # noqa: E501
        if order_by not in allowed_values:
            raise ValueError(
                "Invalid value for `order_by` ({0}), must be one of {1}"  # noqa: E501
                .format(order_by, allowed_values)
            )

        self._order_by = order_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
