# coding: utf-8

"""
    Kimai - API Docs

    JSON API for the Kimai time-tracking software: [API documentation](https://www.kimai.org/documentation/rest-api.html), [Swagger definition file](doc.json)   # noqa: E501

    OpenAPI spec version: 0.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'language': 'str',
        'timezone': 'str',
        'preferences': 'list[UserPreference]',
        'teams': 'list[Team]',
        'id': 'int',
        'alias': 'str',
        'title': 'str',
        'avatar': 'str',
        'memberships': 'TeamMembership',
        'username': 'str',
        'account_number': 'str',
        'enabled': 'bool',
        'roles': 'list[str]',
        'color': 'str'
    }

    attribute_map = {
        'language': 'language',
        'timezone': 'timezone',
        'preferences': 'preferences',
        'teams': 'teams',
        'id': 'id',
        'alias': 'alias',
        'title': 'title',
        'avatar': 'avatar',
        'memberships': 'memberships',
        'username': 'username',
        'account_number': 'accountNumber',
        'enabled': 'enabled',
        'roles': 'roles',
        'color': 'color'
    }

    def __init__(self, language=None, timezone=None, preferences=None, teams=None, id=None, alias=None, title=None, avatar=None, memberships=None, username=None, account_number=None, enabled=None, roles=None, color=None):  # noqa: E501
        """UserEntity - a model defined in Swagger"""  # noqa: E501
        self._language = None
        self._timezone = None
        self._preferences = None
        self._teams = None
        self._id = None
        self._alias = None
        self._title = None
        self._avatar = None
        self._memberships = None
        self._username = None
        self._account_number = None
        self._enabled = None
        self._roles = None
        self._color = None
        self.discriminator = None
        if language is not None:
            self.language = language
        if timezone is not None:
            self.timezone = timezone
        if preferences is not None:
            self.preferences = preferences
        if teams is not None:
            self.teams = teams
        if id is not None:
            self.id = id
        if alias is not None:
            self.alias = alias
        if title is not None:
            self.title = title
        if avatar is not None:
            self.avatar = avatar
        self.memberships = memberships
        self.username = username
        if account_number is not None:
            self.account_number = account_number
        if enabled is not None:
            self.enabled = enabled
        if roles is not None:
            self.roles = roles
        if color is not None:
            self.color = color

    @property
    def language(self):
        """Gets the language of this UserEntity.  # noqa: E501


        :return: The language of this UserEntity.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this UserEntity.


        :param language: The language of this UserEntity.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def timezone(self):
        """Gets the timezone of this UserEntity.  # noqa: E501


        :return: The timezone of this UserEntity.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this UserEntity.


        :param timezone: The timezone of this UserEntity.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def preferences(self):
        """Gets the preferences of this UserEntity.  # noqa: E501


        :return: The preferences of this UserEntity.  # noqa: E501
        :rtype: list[UserPreference]
        """
        return self._preferences

    @preferences.setter
    def preferences(self, preferences):
        """Sets the preferences of this UserEntity.


        :param preferences: The preferences of this UserEntity.  # noqa: E501
        :type: list[UserPreference]
        """

        self._preferences = preferences

    @property
    def teams(self):
        """Gets the teams of this UserEntity.  # noqa: E501


        :return: The teams of this UserEntity.  # noqa: E501
        :rtype: list[Team]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this UserEntity.


        :param teams: The teams of this UserEntity.  # noqa: E501
        :type: list[Team]
        """

        self._teams = teams

    @property
    def id(self):
        """Gets the id of this UserEntity.  # noqa: E501


        :return: The id of this UserEntity.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserEntity.


        :param id: The id of this UserEntity.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def alias(self):
        """Gets the alias of this UserEntity.  # noqa: E501


        :return: The alias of this UserEntity.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this UserEntity.


        :param alias: The alias of this UserEntity.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def title(self):
        """Gets the title of this UserEntity.  # noqa: E501


        :return: The title of this UserEntity.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this UserEntity.


        :param title: The title of this UserEntity.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def avatar(self):
        """Gets the avatar of this UserEntity.  # noqa: E501


        :return: The avatar of this UserEntity.  # noqa: E501
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this UserEntity.


        :param avatar: The avatar of this UserEntity.  # noqa: E501
        :type: str
        """

        self._avatar = avatar

    @property
    def memberships(self):
        """Gets the memberships of this UserEntity.  # noqa: E501


        :return: The memberships of this UserEntity.  # noqa: E501
        :rtype: TeamMembership
        """
        return self._memberships

    @memberships.setter
    def memberships(self, memberships):
        """Sets the memberships of this UserEntity.


        :param memberships: The memberships of this UserEntity.  # noqa: E501
        :type: TeamMembership
        """
        if memberships is None:
            raise ValueError("Invalid value for `memberships`, must not be `None`")  # noqa: E501

        self._memberships = memberships

    @property
    def username(self):
        """Gets the username of this UserEntity.  # noqa: E501


        :return: The username of this UserEntity.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserEntity.


        :param username: The username of this UserEntity.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def account_number(self):
        """Gets the account_number of this UserEntity.  # noqa: E501


        :return: The account_number of this UserEntity.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this UserEntity.


        :param account_number: The account_number of this UserEntity.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def enabled(self):
        """Gets the enabled of this UserEntity.  # noqa: E501


        :return: The enabled of this UserEntity.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this UserEntity.


        :param enabled: The enabled of this UserEntity.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def roles(self):
        """Gets the roles of this UserEntity.  # noqa: E501


        :return: The roles of this UserEntity.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this UserEntity.


        :param roles: The roles of this UserEntity.  # noqa: E501
        :type: list[str]
        """

        self._roles = roles

    @property
    def color(self):
        """Gets the color of this UserEntity.  # noqa: E501


        :return: The color of this UserEntity.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this UserEntity.


        :param color: The color of this UserEntity.  # noqa: E501
        :type: str
        """

        self._color = color

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
