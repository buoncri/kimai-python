# coding: utf-8

"""
    Kimai - API Docs

    JSON API for the Kimai time-tracking software: [API documentation](https://www.kimai.org/documentation/rest-api.html), [Swagger definition file](doc.json)   # noqa: E501

    OpenAPI spec version: 0.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomerCollection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'number': 'str',
        'comment': 'str',
        'visible': 'bool',
        'billable': 'bool',
        'currency': 'str',
        'meta_fields': 'list[CustomerMeta]',
        'teams': 'list[Team]',
        'color': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'number': 'number',
        'comment': 'comment',
        'visible': 'visible',
        'billable': 'billable',
        'currency': 'currency',
        'meta_fields': 'metaFields',
        'teams': 'teams',
        'color': 'color'
    }

    def __init__(self, id=None, name=None, number=None, comment=None, visible=None, billable=None, currency=None, meta_fields=None, teams=None, color=None):  # noqa: E501
        """CustomerCollection - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._number = None
        self._comment = None
        self._visible = None
        self._billable = None
        self._currency = None
        self._meta_fields = None
        self._teams = None
        self._color = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.name = name
        if number is not None:
            self.number = number
        if comment is not None:
            self.comment = comment
        self.visible = visible
        self.billable = billable
        self.currency = currency
        if meta_fields is not None:
            self.meta_fields = meta_fields
        if teams is not None:
            self.teams = teams
        if color is not None:
            self.color = color

    @property
    def id(self):
        """Gets the id of this CustomerCollection.  # noqa: E501


        :return: The id of this CustomerCollection.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomerCollection.


        :param id: The id of this CustomerCollection.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CustomerCollection.  # noqa: E501


        :return: The name of this CustomerCollection.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomerCollection.


        :param name: The name of this CustomerCollection.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def number(self):
        """Gets the number of this CustomerCollection.  # noqa: E501


        :return: The number of this CustomerCollection.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this CustomerCollection.


        :param number: The number of this CustomerCollection.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def comment(self):
        """Gets the comment of this CustomerCollection.  # noqa: E501


        :return: The comment of this CustomerCollection.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this CustomerCollection.


        :param comment: The comment of this CustomerCollection.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def visible(self):
        """Gets the visible of this CustomerCollection.  # noqa: E501


        :return: The visible of this CustomerCollection.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this CustomerCollection.


        :param visible: The visible of this CustomerCollection.  # noqa: E501
        :type: bool
        """
        if visible is None:
            raise ValueError("Invalid value for `visible`, must not be `None`")  # noqa: E501

        self._visible = visible

    @property
    def billable(self):
        """Gets the billable of this CustomerCollection.  # noqa: E501


        :return: The billable of this CustomerCollection.  # noqa: E501
        :rtype: bool
        """
        return self._billable

    @billable.setter
    def billable(self, billable):
        """Sets the billable of this CustomerCollection.


        :param billable: The billable of this CustomerCollection.  # noqa: E501
        :type: bool
        """
        if billable is None:
            raise ValueError("Invalid value for `billable`, must not be `None`")  # noqa: E501

        self._billable = billable

    @property
    def currency(self):
        """Gets the currency of this CustomerCollection.  # noqa: E501


        :return: The currency of this CustomerCollection.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CustomerCollection.


        :param currency: The currency of this CustomerCollection.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def meta_fields(self):
        """Gets the meta_fields of this CustomerCollection.  # noqa: E501

        All visible meta (custom) fields registered with this customer  # noqa: E501

        :return: The meta_fields of this CustomerCollection.  # noqa: E501
        :rtype: list[CustomerMeta]
        """
        return self._meta_fields

    @meta_fields.setter
    def meta_fields(self, meta_fields):
        """Sets the meta_fields of this CustomerCollection.

        All visible meta (custom) fields registered with this customer  # noqa: E501

        :param meta_fields: The meta_fields of this CustomerCollection.  # noqa: E501
        :type: list[CustomerMeta]
        """

        self._meta_fields = meta_fields

    @property
    def teams(self):
        """Gets the teams of this CustomerCollection.  # noqa: E501

        If no team is assigned, everyone can access the customer  # noqa: E501

        :return: The teams of this CustomerCollection.  # noqa: E501
        :rtype: list[Team]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this CustomerCollection.

        If no team is assigned, everyone can access the customer  # noqa: E501

        :param teams: The teams of this CustomerCollection.  # noqa: E501
        :type: list[Team]
        """

        self._teams = teams

    @property
    def color(self):
        """Gets the color of this CustomerCollection.  # noqa: E501


        :return: The color of this CustomerCollection.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this CustomerCollection.


        :param color: The color of this CustomerCollection.  # noqa: E501
        :type: str
        """

        self._color = color

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerCollection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerCollection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
