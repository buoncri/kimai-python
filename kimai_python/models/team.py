# coding: utf-8

"""
    Kimai - API Docs

    JSON API for the Kimai time-tracking software: [API documentation](https://www.kimai.org/documentation/rest-api.html), [Swagger definition file](doc.json)   # noqa: E501

    OpenAPI spec version: 0.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Team(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'teamlead': 'User',
        'users': 'list[User]',
        'id': 'int',
        'name': 'str',
        'members': 'list[TeamMember]',
        'customers': 'list[Customer]',
        'projects': 'list[Project]',
        'activities': 'list[Activity]',
        'color': 'str'
    }

    attribute_map = {
        'teamlead': 'teamlead',
        'users': 'users',
        'id': 'id',
        'name': 'name',
        'members': 'members',
        'customers': 'customers',
        'projects': 'projects',
        'activities': 'activities',
        'color': 'color'
    }

    def __init__(self, teamlead=None, users=None, id=None, name=None, members=None, customers=None, projects=None, activities=None, color=None):  # noqa: E501
        """Team - a model defined in Swagger"""  # noqa: E501
        self._teamlead = None
        self._users = None
        self._id = None
        self._name = None
        self._members = None
        self._customers = None
        self._projects = None
        self._activities = None
        self._color = None
        self.discriminator = None
        if teamlead is not None:
            self.teamlead = teamlead
        if users is not None:
            self.users = users
        if id is not None:
            self.id = id
        self.name = name
        if members is not None:
            self.members = members
        if customers is not None:
            self.customers = customers
        if projects is not None:
            self.projects = projects
        if activities is not None:
            self.activities = activities
        if color is not None:
            self.color = color

    @property
    def teamlead(self):
        """Gets the teamlead of this Team.  # noqa: E501


        :return: The teamlead of this Team.  # noqa: E501
        :rtype: User
        """
        return self._teamlead

    @teamlead.setter
    def teamlead(self, teamlead):
        """Sets the teamlead of this Team.


        :param teamlead: The teamlead of this Team.  # noqa: E501
        :type: User
        """

        self._teamlead = teamlead

    @property
    def users(self):
        """Gets the users of this Team.  # noqa: E501


        :return: The users of this Team.  # noqa: E501
        :rtype: list[User]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this Team.


        :param users: The users of this Team.  # noqa: E501
        :type: list[User]
        """

        self._users = users

    @property
    def id(self):
        """Gets the id of this Team.  # noqa: E501


        :return: The id of this Team.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Team.


        :param id: The id of this Team.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Team.  # noqa: E501


        :return: The name of this Team.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Team.


        :param name: The name of this Team.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def members(self):
        """Gets the members of this Team.  # noqa: E501


        :return: The members of this Team.  # noqa: E501
        :rtype: list[TeamMember]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this Team.


        :param members: The members of this Team.  # noqa: E501
        :type: list[TeamMember]
        """

        self._members = members

    @property
    def customers(self):
        """Gets the customers of this Team.  # noqa: E501


        :return: The customers of this Team.  # noqa: E501
        :rtype: list[Customer]
        """
        return self._customers

    @customers.setter
    def customers(self, customers):
        """Sets the customers of this Team.


        :param customers: The customers of this Team.  # noqa: E501
        :type: list[Customer]
        """

        self._customers = customers

    @property
    def projects(self):
        """Gets the projects of this Team.  # noqa: E501


        :return: The projects of this Team.  # noqa: E501
        :rtype: list[Project]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this Team.


        :param projects: The projects of this Team.  # noqa: E501
        :type: list[Project]
        """

        self._projects = projects

    @property
    def activities(self):
        """Gets the activities of this Team.  # noqa: E501


        :return: The activities of this Team.  # noqa: E501
        :rtype: list[Activity]
        """
        return self._activities

    @activities.setter
    def activities(self, activities):
        """Sets the activities of this Team.


        :param activities: The activities of this Team.  # noqa: E501
        :type: list[Activity]
        """

        self._activities = activities

    @property
    def color(self):
        """Gets the color of this Team.  # noqa: E501


        :return: The color of this Team.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Team.


        :param color: The color of this Team.  # noqa: E501
        :type: str
        """

        self._color = color

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Team, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Team):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
