# coding: utf-8

"""
    Kimai - API Docs

    JSON API for the Kimai time-tracking software: [API documentation](https://www.kimai.org/documentation/rest-api.html), [Swagger definition file](doc.json)   # noqa: E501

    OpenAPI spec version: 0.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Task(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tags': 'list[str]',
        'active_timesheets': 'list[TimesheetEntityExpanded]',
        'id': 'int',
        'title': 'str',
        'status': 'str',
        'todo': 'str',
        'description': 'str',
        'project': 'ProjectExpanded',
        'activity': 'ActivityExpanded',
        'user': 'User',
        'team': 'Team',
        'end': 'datetime',
        'estimation': 'int'
    }

    attribute_map = {
        'tags': 'tags',
        'active_timesheets': 'activeTimesheets',
        'id': 'id',
        'title': 'title',
        'status': 'status',
        'todo': 'todo',
        'description': 'description',
        'project': 'project',
        'activity': 'activity',
        'user': 'user',
        'team': 'team',
        'end': 'end',
        'estimation': 'estimation'
    }

    def __init__(self, tags=None, active_timesheets=None, id=None, title=None, status=None, todo=None, description=None, project=None, activity=None, user=None, team=None, end=None, estimation=None):  # noqa: E501
        """Task - a model defined in Swagger"""  # noqa: E501
        self._tags = None
        self._active_timesheets = None
        self._id = None
        self._title = None
        self._status = None
        self._todo = None
        self._description = None
        self._project = None
        self._activity = None
        self._user = None
        self._team = None
        self._end = None
        self._estimation = None
        self.discriminator = None
        if tags is not None:
            self.tags = tags
        if active_timesheets is not None:
            self.active_timesheets = active_timesheets
        if id is not None:
            self.id = id
        self.title = title
        self.status = status
        if todo is not None:
            self.todo = todo
        if description is not None:
            self.description = description
        self.project = project
        self.activity = activity
        if user is not None:
            self.user = user
        if team is not None:
            self.team = team
        if end is not None:
            self.end = end
        if estimation is not None:
            self.estimation = estimation

    @property
    def tags(self):
        """Gets the tags of this Task.  # noqa: E501


        :return: The tags of this Task.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Task.


        :param tags: The tags of this Task.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def active_timesheets(self):
        """Gets the active_timesheets of this Task.  # noqa: E501


        :return: The active_timesheets of this Task.  # noqa: E501
        :rtype: list[TimesheetEntityExpanded]
        """
        return self._active_timesheets

    @active_timesheets.setter
    def active_timesheets(self, active_timesheets):
        """Sets the active_timesheets of this Task.


        :param active_timesheets: The active_timesheets of this Task.  # noqa: E501
        :type: list[TimesheetEntityExpanded]
        """

        self._active_timesheets = active_timesheets

    @property
    def id(self):
        """Gets the id of this Task.  # noqa: E501


        :return: The id of this Task.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Task.


        :param id: The id of this Task.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this Task.  # noqa: E501


        :return: The title of this Task.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Task.


        :param title: The title of this Task.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def status(self):
        """Gets the status of this Task.  # noqa: E501


        :return: The status of this Task.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Task.


        :param status: The status of this Task.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def todo(self):
        """Gets the todo of this Task.  # noqa: E501


        :return: The todo of this Task.  # noqa: E501
        :rtype: str
        """
        return self._todo

    @todo.setter
    def todo(self, todo):
        """Sets the todo of this Task.


        :param todo: The todo of this Task.  # noqa: E501
        :type: str
        """

        self._todo = todo

    @property
    def description(self):
        """Gets the description of this Task.  # noqa: E501


        :return: The description of this Task.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Task.


        :param description: The description of this Task.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def project(self):
        """Gets the project of this Task.  # noqa: E501


        :return: The project of this Task.  # noqa: E501
        :rtype: ProjectExpanded
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Task.


        :param project: The project of this Task.  # noqa: E501
        :type: ProjectExpanded
        """
        if project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")  # noqa: E501

        self._project = project

    @property
    def activity(self):
        """Gets the activity of this Task.  # noqa: E501


        :return: The activity of this Task.  # noqa: E501
        :rtype: ActivityExpanded
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this Task.


        :param activity: The activity of this Task.  # noqa: E501
        :type: ActivityExpanded
        """
        if activity is None:
            raise ValueError("Invalid value for `activity`, must not be `None`")  # noqa: E501

        self._activity = activity

    @property
    def user(self):
        """Gets the user of this Task.  # noqa: E501


        :return: The user of this Task.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Task.


        :param user: The user of this Task.  # noqa: E501
        :type: User
        """

        self._user = user

    @property
    def team(self):
        """Gets the team of this Task.  # noqa: E501


        :return: The team of this Task.  # noqa: E501
        :rtype: Team
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this Task.


        :param team: The team of this Task.  # noqa: E501
        :type: Team
        """

        self._team = team

    @property
    def end(self):
        """Gets the end of this Task.  # noqa: E501


        :return: The end of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this Task.


        :param end: The end of this Task.  # noqa: E501
        :type: datetime
        """

        self._end = end

    @property
    def estimation(self):
        """Gets the estimation of this Task.  # noqa: E501


        :return: The estimation of this Task.  # noqa: E501
        :rtype: int
        """
        return self._estimation

    @estimation.setter
    def estimation(self, estimation):
        """Sets the estimation of this Task.


        :param estimation: The estimation of this Task.  # noqa: E501
        :type: int
        """

        self._estimation = estimation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Task, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Task):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
